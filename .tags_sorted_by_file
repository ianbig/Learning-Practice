!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
main	Extern/extern.c	/^int main(int argc, char **argv) {$/;"	f
change_extern_function	Extern/extern_one_file.c	/^void change_extern_function(void) {$/;"	f
g_var	Extern/extern_one_file.c	/^int g_var = 20;/;"	v
main	Extern/extern_one_file.c	/^int main( int argc, char **argv) {$/;"	f
CC	Extern/makefile	/^CC = gcc$/;"	m
TARGET	Extern/makefile	/^TARGET = extern extern_one_file$/;"	m
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
do_nothing	Function/doNothing.c	/^do_nothing() {}$/;"	f
main	Function/doNothing.c	/^int main() {$/;"	f
main	Function/function_declare.c	/^int main(int argc, char **argv) {$/;"	f
paraFunc	Function/function_declare.c	/^void paraFunc(a) $/;"	f
ADD_CALLBACK_S	Pointer/const_pointer_and_callback.c	/^}ADD_CALLBACK_S;$/;"	t	typeref:struct:__anon1	file:
ADD_FUNCTION_POINTER	Pointer/const_pointer_and_callback.c	/^typedef int (*ADD_FUNCTION_POINTER)(int a, int b);$/;"	t	file:
INT	Pointer/const_pointer_and_callback.c	/^typedef char INT;$/;"	t	file:
callbackFunc_callee_add	Pointer/const_pointer_and_callback.c	/^static int callbackFunc_callee_add(int a, int b) {$/;"	f	file:
callbackFunc_callee_minus	Pointer/const_pointer_and_callback.c	/^static int callbackFunc_callee_minus(int a, int b) {$/;"	f	file:
callbackFunc_callee_multi	Pointer/const_pointer_and_callback.c	/^static int callbackFunc_callee_multi(int a, int b) {$/;"	f	file:
callbackFunc_caller_pointer_read_only	Pointer/const_pointer_and_callback.c	/^void callbackFunc_caller_pointer_read_only(ADD_CALLBACK_S *const funcObj, int a, int b) {$/;"	f
callbackFunc_caller_value_read_only	Pointer/const_pointer_and_callback.c	/^void callbackFunc_caller_value_read_only(const ADD_CALLBACK_S *funcObj, int a, int b) {$/;"	f
erroFunct	Pointer/const_pointer_and_callback.c	/^int erroFunct(int a, int b) {$/;"	f
main	Pointer/const_pointer_and_callback.c	/^int main () {$/;"	f
mod_1	Pointer/const_pointer_and_callback.c	/^    ADD_FUNCTION_POINTER mod_1;$/;"	m	struct:__anon1	file:
mod_2	Pointer/const_pointer_and_callback.c	/^    ADD_FUNCTION_POINTER mod_2;$/;"	m	struct:__anon1	file:
mod_3	Pointer/const_pointer_and_callback.c	/^    ADD_FUNCTION_POINTER mod_3;$/;"	m	struct:__anon1	file:
obj	Pointer/const_pointer_and_callback.c	/^ADD_CALLBACK_S obj= {$/;"	v
obj_const	Pointer/const_pointer_and_callback.c	/^const ADD_CALLBACK_S obj_const = {$/;"	v
obj_middle_const	Pointer/const_pointer_and_callback.c	/^ADD_CALLBACK_S const obj_middle_const = {$/;"	v
COLUMN	Pointer/two_dim.c	5;"	d	file:
ROW	Pointer/two_dim.c	4;"	d	file:
changeArrayItem	Pointer/two_dim.c	/^void changeArrayItem(int arr[]) {$/;"	f
main	Pointer/two_dim.c	/^int main(int argc, char **argv) {$/;"	f
sum_2d	Pointer/two_dim.c	/^int sum_2d(int junk[][COLUMN], int row) {$/;"	f
sum_2d_VLA	Pointer/two_dim.c	/^int sum_2d_VLA(int row, int column, int junk[row][column]) {$/;"	f
main	String/safe_copy.c	/^int main() {$/;"	f
MASK	bit/bit.c	11;"	d	file:
MAX_BINARY_LINE	bit/bit.c	10;"	d	file:
REAL_S	bit/bit.c	/^} REAL_S;$/;"	t	typeref:struct:__anon8	file:
get_binary_form	bit/bit.c	/^void get_binary_form(int num) {$/;"	f
main	bit/bit.c	/^int main() {$/;"	f
psed	bit/bit.c	/^    int psed;$/;"	m	struct:__anon8	file:
real	bit/bit.c	/^    int real;$/;"	m	struct:__anon8	file:
CC	bit/makefile	/^CC = gcc$/;"	m
CFLAG	bit/makefile	/^CFLAG = -g -Wall -Werror$/;"	m
SOURCE	bit/makefile	/^SOURCE = bit.c$/;"	m
main	control-flow/do-while.c	/^int main() {$/;"	f
ARRAY_SIZE	control-flow/goto.c	3;"	d	file:
main	control-flow/goto.c	/^int main() {$/;"	f
CC	control-flow/makefile	/^CC = gcc$/;"	m
CFLAG	control-flow/makefile	/^CFLAG = -Wall -Werror$/;"	m
TARGET	control-flow/makefile	/^TARGET = switch do-while goto$/;"	m
main	control-flow/switch.c	/^int main() {$/;"	f
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
CC	pthread-practice/Basic/makefile	/^CC = gcc$/;"	m
CFLAG	pthread-practice/Basic/makefile	/^CFLAG = -Wall -Werror -g -pthread$/;"	m
TARGET	pthread-practice/Basic/makefile	/^TARGET = no-lock semaphore mutex$/;"	m
DIS_NUM	pthread-practice/Basic/mutex.c	11;"	d	file:
add_huge_num	pthread-practice/Basic/mutex.c	/^void add_huge_num() {$/;"	f
global	pthread-practice/Basic/mutex.c	/^unsigned long int global = 0;$/;"	v
main	pthread-practice/Basic/mutex.c	/^int main(int argc, char **argv) {$/;"	f
mutex	pthread-practice/Basic/mutex.c	/^pthread_mutex_t mutex;$/;"	v
DIS_NUM	pthread-practice/Basic/no-lock.c	14;"	d	file:
add_huge_num	pthread-practice/Basic/no-lock.c	/^void add_huge_num() {$/;"	f
global	pthread-practice/Basic/no-lock.c	/^unsigned long int global = 0;$/;"	v
main	pthread-practice/Basic/no-lock.c	/^int main(int argc, char **argv) {$/;"	f
DIS_NUM	pthread-practice/Basic/semaphore.c	10;"	d	file:
add_huge_num	pthread-practice/Basic/semaphore.c	/^void add_huge_num() {$/;"	f
global	pthread-practice/Basic/semaphore.c	/^unsigned long int global = 0;$/;"	v
main	pthread-practice/Basic/semaphore.c	/^int main(int argc, char **argv) {$/;"	f
semaphores	pthread-practice/Basic/semaphore.c	/^sem_t semaphores;$/;"	v
CONSUMER	pthread-practice/Producer-Consumer/deadlock.c	/^    CONSUMER,$/;"	e	enum:__anon7	file:
MAX_BUFFER_SIZE	pthread-practice/Producer-Consumer/deadlock.c	6;"	d	file:
OFF	pthread-practice/Producer-Consumer/deadlock.c	/^    OFF,$/;"	e	enum:__anon6	file:
ON	pthread-practice/Producer-Consumer/deadlock.c	/^    ON$/;"	e	enum:__anon6	file:
PRODUCER	pthread-practice/Producer-Consumer/deadlock.c	/^    PRODUCER,$/;"	e	enum:__anon7	file:
buffer	pthread-practice/Producer-Consumer/deadlock.c	/^int buffer[MAX_BUFFER_SIZE] = {0};$/;"	v
consumer	pthread-practice/Producer-Consumer/deadlock.c	/^void consumer() {$/;"	f
consumer_thread_status	pthread-practice/Producer-Consumer/deadlock.c	/^int consumer_thread_status = ON;$/;"	v
itemCounts	pthread-practice/Producer-Consumer/deadlock.c	/^int itemCounts = 0;$/;"	v
main	pthread-practice/Producer-Consumer/deadlock.c	/^int main(int argc, char **argv) {$/;"	f
mysleep	pthread-practice/Producer-Consumer/deadlock.c	/^void mysleep(int type) {$/;"	f
producer	pthread-practice/Producer-Consumer/deadlock.c	/^void producer() {$/;"	f
producer_thread_status	pthread-practice/Producer-Consumer/deadlock.c	/^int producer_thread_status = OFF;$/;"	v
putItems	pthread-practice/Producer-Consumer/deadlock.c	/^int putItems(int item) {$/;"	f
retrevieItem	pthread-practice/Producer-Consumer/deadlock.c	/^int retrevieItem() {$/;"	f
wake	pthread-practice/Producer-Consumer/deadlock.c	/^void wake(int type) {$/;"	f
CONSUMER	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^    CONSUMER,$/;"	e	enum:__anon3	file:
MAX_BUFFER_SIZE	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	8;"	d	file:
OFF	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^    OFF,$/;"	e	enum:__anon2	file:
ON	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^    ON$/;"	e	enum:__anon2	file:
PRODUCER	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^    PRODUCER,$/;"	e	enum:__anon3	file:
buffer	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int buffer[MAX_BUFFER_SIZE] = {0};$/;"	v
consumer	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^void consumer() {$/;"	f
consumer_thread_status	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int consumer_thread_status = ON;$/;"	v
itemCounts	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int itemCounts = 0;$/;"	v
main	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int main(int argc, char **argv) {$/;"	f
mysleep	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^void mysleep(int type) {$/;"	f
producer	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^void producer() {$/;"	f
producer_thread_status	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int producer_thread_status = OFF;$/;"	v
putItems	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int putItems(int item) {$/;"	f
retrevieItem	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^int retrevieItem() {$/;"	f
wake	pthread-practice/Producer-Consumer/deadlock_semaphore_one.c	/^void wake(int type) {$/;"	f
CONSUMER	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^    CONSUMER,$/;"	e	enum:__anon5	file:
MAX_BUFFER_SIZE	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	11;"	d	file:
OFF	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^    OFF,$/;"	e	enum:__anon4	file:
ON	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^    ON$/;"	e	enum:__anon4	file:
PRODUCER	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^    PRODUCER,$/;"	e	enum:__anon5	file:
THREAD_SHARED	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	12;"	d	file:
buffer	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^int buffer[MAX_BUFFER_SIZE] = {0};$/;"	v
capacity	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^sem_t capacity;$/;"	v
consumer	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^void consumer() {$/;"	f
in	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^int in = 0, out = 0;$/;"	v
itemCount	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^sem_t itemCount;$/;"	v
main	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^int main(int argc, char **argv) {$/;"	f
mutex_for_buffer	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^pthread_mutex_t mutex_for_buffer;$/;"	v
out	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^int in = 0, out = 0;$/;"	v
producer	pthread-practice/Producer-Consumer/deadlock_semaphore_tradition.c	/^void producer() {$/;"	f
CC	pthread-practice/Producer-Consumer/makefile	/^CC = gcc$/;"	m
CFLAG	pthread-practice/Producer-Consumer/makefile	/^CFLAG = -Wall -Werror -g -pthread$/;"	m
TARGET	pthread-practice/Producer-Consumer/makefile	/^TARGET = deadlock deadlock_semaphore_tradition$/;"	m
CONST	variable/constant.c	13;"	d	file:
CONST_BIG_VALUE	variable/constant.c	16;"	d	file:
CONST_FLOAT	variable/constant.c	14;"	d	file:
CONST_LONG	variable/constant.c	15;"	d	file:
HEX	variable/constant.c	20;"	d	file:
HEX_CONST	variable/constant.c	18;"	d	file:
OCT	variable/constant.c	19;"	d	file:
OCT_CONST	variable/constant.c	17;"	d	file:
main	variable/constant.c	/^int main() {$/;"	f
CC	variable/makefile	/^CC = gcc$/;"	m
CFLAG	variable/makefile	/^CFLAG = -g -Wall -Werror$/;"	m
TARGET	variable/makefile	/^TARGET = naming_convention_exec constant type_conversion$/;"	m
main	variable/naming_convention.c	/^int main() {$/;"	f
_NAMING_CONVENTION_H	variable/naming_convention.h	2;"	d
_source	variable/naming_convention.h	/^int _source = 10;$/;"	v
INT_CONST	variable/type_conversion.c	15;"	d	file:
LONG_CONST	variable/type_conversion.c	16;"	d	file:
main	variable/type_conversion.c	/^int main() {$/;"	f
type_convert	variable/type_conversion.c	/^void type_convert(char character, float float_num) {$/;"	f
